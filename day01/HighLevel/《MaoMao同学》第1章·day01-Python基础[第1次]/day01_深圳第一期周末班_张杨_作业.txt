1、变量命名规范
	1）以字母、数字、下划线命名
	2）变量第一个字符不能以数字开头
	3）变量不能以python关键字命名
	4）变量应该具有描述性
	5）变量不能以汉字、拼音命名

2、字符串类型

3、if基本结构
1）单分支
if 条件:
	满足条件后要执行的代码
	
2）双分支
if 条件:
	满足条件要执行的代码
else：
	if条件不满足要执行的代码
	
3）多分支条件
if 条件：
	满足条件要执行的代码
elif 条件：
	上面条件不满足要执行的代码
......
else:
	上面所有的条件不满足要执行的代码
	
4、代码如下
#!/usr/bin/env python
# -*- coding: utf-8 -*-

a = '''文能提笔安天下,   
武能上马定乾坤.   
心存谋略何人胜,   
古今英雄唯是君. '''
print(a)

5、代码如下
a = 66
b = int(input('请输入数字：'))
if b > a:
	print('猜测的结果大了')
elif b < a:
	print('猜测的结果小了')
else :
	print('猜测结果正确')
	
6、代码如下
age = int(input('请输入你的年龄：'))
if age < 10 :
	print('小屁孩')
elif age < 20 :
	print('青春期叛逆的小屁孩')
elif age < 30 :
	print('开始定性, 开始混社会的小屁孩儿')
elif age < 40 :
	print('体制看老大不小了, 赶紧结婚小屁孩儿')
elif age < 50 :
	print('家里有个不听话的小屁孩儿')
elif age < 60 :
	print('自己马上变成不听话的老屁孩儿')
elif age < 70 :
	print('活着还不错的老屁孩儿')
elif age < 90 :
	print('人生就快结束了的一个老屁孩儿')
else :
	print('再见了这个世界')
	
7、单行注释：#被注释内容
多行注释：三引号，'''被注释内容'''，或者"""被注释内容"""

8、Python3.x和Python2.x的区别 
1.性能 
	Py3.0运行 pystone benchmark的速度比Py2.5慢30%。Guido认为Py3.0有极大的优化空间，在字符串和整形操作上可 以取得很好的优化结果。 
	Py3.1性能比Py2.5慢15%，还有很大的提升空间。 
2.编码 
	Py3.X源码文件默认使用utf-8编码，这就使中文是合法的
3. 语法 
	1）去除了<>，全部改用!= 
	2）去除``，全部改用repr() 
	3）关键词加入as 和with，还有True,False,None 
	4）整型除法返回浮点数，要得到整型结果，请使用// 
	5）加入nonlocal语句。使用noclocal x可以直接指派外围（非全局）变量 
	6）去除print语句，加入print()函数实现相同的功能。同样的还有 exec语句，已经改为exec()函数 
	7）改变了顺序操作符的行为，例如x<y，当x和y类型不匹配时抛出TypeError而不是返回随即的 bool值  
	8）输入函数改变了，删除了raw_input，用input代替
	9）去除元组参数解包。不能def(a, (b, c)):pass这样定义函数了 
	10）新式的8进制字变量，相应地修改了oct()函数。 
	11）增加了 2进制字面量和bin()函数 
	12）扩展的可迭代解包。在Py3.X 里，a, b, *rest = seq和 *rest, a = seq都是合法的，只要求两点：rest是list对象和seq是可迭代的。 
	13）新的super()，可以不再给super()传参数
	14）新的metaclass语法
	15）支持class decorator。用法与函数decorator一样
4. 字符串和字节串 
	1）现在字符串只有str一种类型，但它跟2.x版本的unicode几乎一样。
	2）新增了bytes类型，对应于2.X版本的八位串
5.数据类型 
	1）Py3.X去除了long类型，现在只有一种整型——int，但它的行为就像2.X版本的long 
	2）新增了bytes类型，对应于2.X版本的八位串,str对象和bytes对象可以使用.encode() (str -> bytes) or .decode() (bytes -> str)方法相互转化。 
	3）dict的.keys()、.items 和.values()方法返回迭代器，而之前的iterkeys()等函数都被废弃。同时去掉的还有dict.has_key()，用 in替代它吧 
6.面向对象 
	1）引入抽象基类（Abstraact Base Classes，ABCs）。 
	2）容器类和迭代器类被ABCs化，所以cellections模块里的类型比Py2.5多了很多。另外，数值类型也被ABCs化。 
	3）迭代器的next()方法改名为__next__()，并增加内置函数next()，用以调用迭代器的__next__()方法 
	4）增加了@abstractmethod和 @abstractproperty两个 decorator，编写抽象方法（属性）更加方便。 
7.异常 
	1）所以异常都从 BaseException继承，并删除了StardardError 
	2）去除了异常类的序列行为和.message属性 
	3）用 raise Exception(args)代替 raise Exception, args语法 
	4）捕获异常的语法改变，引入了as关键字来标识异常实例，在Py2.5中： 
	5）异常链，因为__context__在3.0a1版本中没有实现 
8.模块变动 
	1）移除了cPickle模块，可以使用pickle模块代替。最终我们将会有一个透明高效的模块。 
	2）移除了imageop模块 
	3）移除了 audiodev, Bastion, bsddb185, exceptions, linuxaudiodev, md5, MimeWriter, mimify, popen2, rexec, sets, sha, stringold, strop, sunaudiodev, timing和xmllib模块 
	4）移除了bsddb模块(单独发布，可以从http://www.jcea.es/programacion/pybsddb.htm获取) 
	5）移除了new模块 
	6）os.tmpnam()和os.tmpfile()函数被移动到tmpfile模块下 
	7）tokenize模块现在使用bytes工作。主要的入口点不再是generate_tokens，而是 tokenize.tokenize() 
9.其它 
	1）xrange() 改名为range()，要想使用range()获得一个list，必须显式调用
	2）bytes对象不能hash，也不支持 b.lower()、b.strip()和b.split()方法，但对于后两者可以使用 b.strip(b’\n\t\r \f’)和b.split(b’ ‘)来达到相同目的 
	3）zip()、map()和filter()都返回迭代器。而apply()、 callable()、coerce()、 execfile()、reduce()和reload ()函数都被去除了 
	现在可以使用hasattr()来替换 callable(). hasattr()的语法如：hasattr(string, '__name__')
	4）string.letters和相关的.lowercase和.uppercase被去除，请改用string.ascii_letters 等 
	5）如果x < y的不能比较，抛出TypeError异常。2.x版本是返回伪随机布尔值的 
	6）__getslice__系列成员被废弃。a[i:j]根据上下文转换为a.__getitem__(slice(I, j))或 __setitem__和 __delitem__调用 
	7）file类被废弃

9、代码如下
a = '麻花藤'
b = input('请输入麻花藤：')
if a == b :
	print('真聪明')
else :
	print('你是傻逼么')
	
10、代码如下
count = 1
a = ' '
b = '1'
while count < 10 :
	count = count + 1
	if count == 7 :
		b = b + a
	else :
		b = b + str(count)
print(b)

11、代码如下
count = 1
sum1 = 0
while count < 101 :
	sum1 = sum1 + count
	count = count + 1
print(sum1)

12、代码如下
count = 1
while count < 101 :
	if count % 2 == 1 :
		print(count)
	count = count + 1

13、代码如下
count = 1
while count < 101 :
	if count % 2 == 0 :
		print(count)
	count = count + 1

14、代码如下
sum1 = 1
count = 1
while count < 99 :
	count += 1
	if count % 2 == 0 :
		sum1 = sum1 - count
	else :
		sum1 = sum1 + count
print (sum1)































