（1） 简述变量命名规范：
    变量由数字，字母和下划线任意组合
    变量不能以数字开头
    变量不能是python中的关键字，建议设置变量具有描述性。

	
（2） name = input(">>>")name变量是什么数据类型？
    input 如果没有进行类型转换，则变量name为字符串类型

	
（3） if条件语句的基本结构？
    if...else...
    if...elif...else...
    if语句也可以嵌套

	
（4） 用print打印出下面的内容：
    文能提笔安天下，
    武能上马定乾坤，
    心存谋略何人胜，
    古今英雄唯是君。
print("文能提笔安天下，\n武能上马定乾坤，\n心存谋略何人胜，\n古今英雄唯是君。")


（5） 利用if语句写出猜大小的游戏：
设定一个理想数字如：66，让用户输入一个数字，如果比66大，则显示猜测的结果打了；如果比66小，则
显示猜测的结果小了；只有等于66，显示猜测结果正确。
while True:
    num = int(input("请输入一个数字："))
    if num > 100 or num < 0:
        print("请输入1~100里面的数字...")
    elif num > 66:
        print("猜测结果大了...")
    elif num < 66:
        print("猜测结果小了..")
    elif num == 66:
        print("猜测结果正确")
        break

		
（6） 提示用户输入他的年龄，程序进行判断。
如果小于10, 提示小屁孩, 如果大于10, 小于于 20, 提示青春期叛逆的小屁孩. 如果大于20, 小于30. 提
示开始定性, 开始混社会的小屁孩儿, 如果大于30, 小于40. 体制看老大不小了, 赶紧结婚小屁孩儿. 如果大
于40, 小于50. 提示家里有个不听话的小屁孩儿. 如果大于50, 小于60. 提示自己马上变成不听 话的老屁孩
儿.如果大于60, 小于70. 提示活着还不错的老屁孩儿. 如果大于70, 小于于 90. 提示人生就快结束了的一个
老屁孩儿. 如果大于90以上. 提示. 再见了这个世界
age = int(input("请输入你的年龄："))
if age >= 90:
    print("再见了这个世界...")
elif age >=70:
    print("人生就快结束了的一个老屁孩儿...")
elif age >= 60:
    print("活着还不错的老屁孩...")
elif age >= 50:
    print("自己马上变成不听话的老屁孩儿...")
elif age >= 40:
    print("家里有个不听话的小屁孩儿...")
elif age >= 30:
    print("体制看老大不小了，赶紧结婚小屁孩儿...")
elif age >= 20:
    print("开始定性,开始混社会的小屁孩儿...")
elif age >= 10:
    print("青春期叛逆的小屁孩儿...")
else:
    print("小屁孩儿...")

	
（7） 单行注释以及多行注释？
    单行注释： #
    多行注释：'''注释内容''' 或者 """注释内容"""

	
（8） 简述你所知道的python3x和python2x的区别？
    python2x:源码冗余，重复，不规范。
    python3x：源码优美，清晰，简单。

	
（9） 提示用户输入麻花藤，判断用户输入的对不对，如果对，提示真聪明，如果不对，提示你是傻逼么！
name = input("输入用户名>>>")
if name == "麻花藤":
    print("你真聪明!")
else:
    print("你是傻逼么!")

	
（10） 使用while循环输入1 2 3 4 5 6 8 9 10
count = 0
while count < 10:
        count = count + 1
        if count == 7:
            continue
        print(count)


（11） 求1-100的所有数的和
num = 1
sum = 0
while num <= 100:
    sum =  sum + num
    num = num + 1
print(sum)


（12） 输出1-100内所有奇数
for add_num in range(101):     #使用内置函数range生成序列
    if add_num % 2 == 1:
        print(add_num)


（13） 输出1-100内的所有偶数
for add_num in range(101):
    if add_num % 2 == 0:
        print(add_num)

		
（14） 求1-2+3+4+5...99的所有数的和
num = 1
sum = 0
while num <= 99:
    sum =  sum + num
    num = num + 1
print(sum)

